{"ast":null,"code":"import _classCallCheck from \"D:\\\\Projects\\\\playground\\\\playground-bitcoin-blockcrypher\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport decode from \"jwt-decode\";\nimport axios from 'axios';\nvar API_URL = \"http://localhost:5000/api\";\n\nvar AuthHelper = function AuthHelper() {\n  var _this = this;\n\n  _classCallCheck(this, AuthHelper);\n\n  this.loggedIn = function () {\n    var token = _this.getToken(); // Getting token from localstorage\n\n\n    return !!token && !_this.isTokenExpired(token);\n  };\n\n  this.isTokenExpired = function (token) {\n    try {\n      var decoded = decode(token);\n      return decoded.exp < Date.now() / 1000;\n    } catch (err) {\n      console.log(\"expired check failed!\");\n      return false;\n    }\n  };\n\n  this.setToken = function (idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  this.getToken = function () {\n    return localStorage.getItem(\"auth_token\");\n  };\n\n  this.logout = function () {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n  };\n\n  this.getConfirm = function () {\n    // Using jwt-decode npm package to decode the token\n    var answer = decode(_this.getToken());\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  this._checkStatus = function (response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n};\n\nexport { AuthHelper as default };","map":{"version":3,"sources":["D:\\Projects\\playground\\playground-bitcoin-blockcrypher\\client\\src\\utils\\AuthHelper.js"],"names":["decode","axios","API_URL","AuthHelper","loggedIn","token","getToken","isTokenExpired","decoded","exp","Date","now","err","console","log","setToken","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","_checkStatus","response","status","error","Error","statusText"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,YAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,2BAAhB;;IAEqBC,U;;;;;OAGnBC,Q,GAAW,YAAM;AACf,QAAMC,KAAK,GAAG,KAAI,CAACC,QAAL,EAAd,CADe,CACgB;;;AAC/B,WAAO,CAAC,CAACD,KAAF,IAAW,CAAC,KAAI,CAACE,cAAL,CAAoBF,KAApB,CAAnB;AACD,G;;OAGDE,c,GAAiB,UAAAF,KAAK,EAAI;AACxB,QAAI;AACF,UAAMG,OAAO,GAAGR,MAAM,CAACK,KAAD,CAAtB;AACA,aAAQG,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAAnC;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,aAAO,KAAP;AACD;AACF,G;;OAEDC,Q,GAAW,UAAAC,OAAO,EAAI;AACpB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACD,G;;OAGDV,Q,GAAW,YAAM;AACf,WAAOW,YAAY,CAACE,OAAb,CAAqB,YAArB,CAAP;AACD,G;;OAEDC,M,GAAS,YAAM;AACb;AACAH,IAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACD,G;;OAEDC,U,GAAa,YAAM;AACjB;AACA,QAAIC,MAAM,GAAGvB,MAAM,CAAC,KAAI,CAACM,QAAL,EAAD,CAAnB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAOS,MAAP;AACD,G;;OAEDC,Y,GAAe,UAAAC,QAAQ,EAAI;AACzB;AACA,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnD;AACA,aAAOD,QAAP;AACD,KAHD,MAGO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,G;;;SAnDkBxB,U","sourcesContent":["import decode from \"jwt-decode\";\r\nimport axios from 'axios';\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\nexport default class AuthHelper {\r\n\r\n  // Checks if there is a saved token and it's still valid\r\n  loggedIn = () => {\r\n    const token = this.getToken(); // Getting token from localstorage\r\n    return !!token && !this.isTokenExpired(token);\r\n  };\r\n\r\n  // Check if token is expired\r\n  isTokenExpired = token => {\r\n    try {\r\n      const decoded = decode(token);\r\n      return (decoded.exp < Date.now() / 1000);\r\n    } catch (err) {\r\n      console.log(\"expired check failed!\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  setToken = idToken => {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem(\"id_token\", idToken);\r\n  };\r\n\r\n  // Retrieves the user token from localStorage\r\n  getToken = () => {\r\n    return localStorage.getItem(\"auth_token\");\r\n  };\r\n\r\n  logout = () => {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem(\"id_token\");\r\n  };\r\n\r\n  getConfirm = () => {\r\n    // Using jwt-decode npm package to decode the token\r\n    let answer = decode(this.getToken());\r\n    console.log(\"Recieved answer!\");\r\n    return answer;\r\n  };\r\n\r\n  _checkStatus = response => {\r\n    // raises an error in case response status is not a success\r\n    if (response.status >= 200 && response.status < 300) {\r\n      // Success status lies between 200 to 300\r\n      return response;\r\n    } else {\r\n      var error = new Error(response.statusText);\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}